{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/Components/Tabs/Tabs.svelte","../../src/Components/Tabs/TabList.svelte","../../src/Components/Tabs/TabPanel.svelte","../../src/Components/Tabs/Tab.svelte","../../src/color.ts","../../src/stores.ts","../../src/Category.svelte","../../src/Hour.svelte","../../src/Minute.svelte","../../src/accum.ts","../../src/stat.ts","../../src/HourStat.svelte","../../src/DayStat.svelte","../../src/EventList.svelte","../../src/Components/LogoutComponent.svelte","../../src/Main.svelte","../../src/Components/LoginComponent.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.49.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script context=\"module\">\n\texport const TABS = {};\n</script>\n\n<script>\n\timport { setContext, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n\tconst tabs = [];\n\tconst panels = [];\n\tconst selectedTab = writable(null);\n\tconst selectedPanel = writable(null);\n\n\tsetContext(TABS, {\n\t\tregisterTab: tab => {\n\t\t\ttabs.push(tab);\n\t\t\tselectedTab.update(current => current || tab);\n\t\t\t\n\t\t\tonDestroy(() => {\n\t\t\t\tconst i = tabs.indexOf(tab);\n\t\t\t\ttabs.splice(i, 1);\n\t\t\t\tselectedTab.update(current => current === tab ? (tabs[i] || tabs[tabs.length - 1]) : current);\n\t\t\t});\n\t\t},\n\n\t\tregisterPanel: panel => {\n\t\t\tpanels.push(panel);\n\t\t\tselectedPanel.update(current => current || panel);\n\t\t\t\n\t\t\tonDestroy(() => {\n\t\t\t\tconst i = panels.indexOf(panel);\n\t\t\t\tpanels.splice(i, 1);\n\t\t\t\tselectedPanel.update(current => current === panel ? (panels[i] || panels[panels.length - 1]) : current);\n\t\t\t});\n\t\t},\n\n\t\tselectTab: tab => {\n\t\t\tconst i = tabs.indexOf(tab);\n\t\t\tselectedTab.set(tab);\n\t\t\tselectedPanel.set(panels[i]);\n\t\t},\n\n\t\tselectedTab,\n\t\tselectedPanel\n\t});\n</script>\n\n<div class=\"tabs\">\n\t<slot></slot>\n</div>","<div class=\"tab-list\">\n\t<slot></slot>\n</div>\n\n<style>\n\t.tab-list {\n\t\tborder-bottom: 1px solid teal;\n\t}\n</style>","<script>\n\timport { getContext } from 'svelte';\n\timport { TABS } from './Tabs.svelte';\n\n\tconst panel = {};\n\tconst { registerPanel, selectedPanel } = getContext(TABS);\n\n\tregisterPanel(panel);\n</script>\n\n{#if $selectedPanel === panel}\n\t<slot></slot>\n{/if}","<script>\n\timport { getContext } from 'svelte';\n\timport { TABS } from './Tabs.svelte';\n\n\tconst tab = {};\n\tconst { registerTab, selectTab, selectedTab } = getContext(TABS);\n\n\tregisterTab(tab);\n</script>\n\n<style>\n\tbutton {\n\t\tborder-bottom: 3px solid #5ab4bd;\n\t\tfont-size: 16px;\n\t\theight: 40px;\n\t\twidth: 100px;\n\t\tcolor: #565656;\n\t\tbackground-color: #d9d9d9;\n\t\ttransition: all 0.2s ease;\n\n\t\t/* background: none; */\n\t\tborder: none;\n\t\t/* border-bottom: 2px solid white; */\n\t\tborder-radius: 0;\n\t\tmargin: 0;\n\t\tpadding: 5px;\n\t\t/* color: #ccc; */\n\t}\n\t\n\t.selected {\n\t\t/* border-bottom: 2px solid teal;\n\t\tcolor: #333; */\n\t\tbackground-color: #5ab4bd;\n\t    color: #fff;\n\t}\n\tbutton:hover {\n\t\topacity: 0.75;\n\t}\n</style>\n\n<button class:selected=\"{$selectedTab === tab}\" on:click=\"{() => selectTab(tab)}\">\n\t<slot></slot>\n</button>","function hslToHex(h, s, l) {\n    l /= 100;\n    const a = s * Math.min(l, 1 - l) / 100;\n    const f = n => {\n        const k = (n + h / 30) % 12;\n        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n        return Math.round(255 * color).toString(16).padStart(2, '0'); // convert to Hex and prefix \"0\" if needed\n    };\n    return `#${f(0)}${f(8)}${f(4)}`;\n}\nexport function palette(n) {\n    if (n < 0) {\n        return \"#ccc\";\n    }\n    let hue = n * (Math.sqrt(5) - 1) / 2 / 3;\n    hue = (hue * 360) % 360;\n    let s = 30;\n    let v = 50;\n    return hslToHex(hue, s, v);\n}\n","import { writable, get } from 'svelte/store';\nconst date = new Date();\nexport const hour = writable(date.getHours());\nexport const minute = writable(date.getMinutes());\nexport const history = writable([]);\nexport const cats = writable({});\n// for debug\nexport const token = writable(\"\");\nexport const status = writable(\"Offline\");\nconst BASEURL = 'http://www.chem.okayama-u.ac.jp:8088';\n// const BASEURL = \"https://timeaccount-test-app.herokuapp.com\"\nexport async function getToken(username, password) {\n    /* parameters:\n       username and password\n\n       then find the user id\n       and make a new token\n\n       returns:\n       token\n       */\n    const body_ = JSON.stringify({\n        \"un\": username,\n        \"pw\": password\n    });\n    const res = await fetch(BASEURL + '/v0/auth/', {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: body_\n    });\n    // もし不成功なら空文字列を返す。\n    if (res.status != 200) {\n        return \"\";\n    }\n    let result = await res.json();\n    // console.log(\"RESULT:\"+result)\n    if (result != \"\") {\n        token.set(result);\n        return result;\n    }\n    return \"\";\n}\nexport async function storeAction(endtime, duration, category, action) {\n    /*\n        parameters:\n        endtime: unixtime?\n        duration: in minutes\n        category: integer\n        action: string\n\n        store an action record to the server\n    */\n    status.set(\"Updating\");\n    const body_ = JSON.stringify({\n        token: get(token),\n        endtime: endtime,\n        duration: duration,\n        category: category,\n        action: action\n    });\n    const controller = new AbortController();\n    // 5 second timeout:\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const res = await fetch(BASEURL + '/v0/', {\n        method: \"PUT\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: body_,\n        signal: controller.signal // 5 sec\n    }).catch(() => { status.set(\"Offline\"); });\n    if ((typeof res === 'undefined') || (res.status != 200)) {\n        status.set(\"Uncertain\");\n        return;\n    }\n    status.set(\"\");\n}\nexport async function getHistory() {\n    /*\n        get the history of actions in descend time order\n\n        store the history and category data (button list)\n\n        This is called every one minute in Main.svelte\n     */\n    const body_ = JSON.stringify({\n        \"token\": get(token)\n    });\n    const controller = new AbortController();\n    // 5 second timeout:\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const duration = \"10080\"; // 10080 minutes == 1 week\n    const res = await fetch(BASEURL + '/v0/query/' + duration, {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: body_,\n        signal: controller.signal // 5 sec\n    }).catch(() => { status.set(\"Offline\"); });\n    if ((typeof res === 'undefined') || (res.status != 200)) {\n        status.set(\"Uncertain\");\n        return;\n    }\n    status.set(\"\");\n    res.json().then(result => {\n        let remote_history = JSON.parse(result);\n        if (remote_history.length > 0) {\n            const remotelast = remote_history[0][1];\n            minute.set(Math.floor(remotelast % 60));\n            hour.set(Math.floor(remotelast / 60 + 9) % 24);\n        }\n        // もし、読みこんだhistoryの最終データが、クライアント上の最終データと同じ時刻であれば、\n        // historyもcatsも更新しない。\n        // 更新してしまうと、クライアント側で再表示が必要になる。\n        const l = get(history);\n        if (l.length > 0) {\n            // 手許の最終actionの時刻\n            const locallast = Math.floor(l[0][1]);\n            // サーバ上の最終actionの時刻\n            const remotelast = remote_history[0][1];\n            // もし履歴の最新と、こちらの履歴の最新の時刻が一致するなら\n            if (locallast == remotelast) {\n                return;\n            }\n        }\n        let categories = {};\n        for (let r in remote_history) {\n            let row = remote_history[r];\n            // 0 user_id, 1 endtime, 2 duration, 3 category, 4 action, 5 hours, 6 minutes\n            // svelteでの表示が楽になるように、時と分を準備する。\n            const minutes = Math.floor(row[1] % 60);\n            const hours = Math.floor(row[1] / 60 + 9) % 24;\n            row.push(hours);\n            row.push(minutes);\n            // categoryを再構成\n            const cat = row[3];\n            const endtime = row[1];\n            const action = row[4];\n            if (!(cat in categories)) {\n                categories[cat] = {};\n            }\n            if (!(action in categories[cat])) {\n                // 一番新しいものだけを追加する。\n                categories[cat][action] = endtime;\n            }\n        }\n        // writableを更新する。\n        history.set(remote_history);\n        cats.set(categories);\n    });\n    return;\n}\n","<script lang=\"ts\">\n    // import { get } from 'svelte/store';\n    import { palette } from './color';\n    import { hour, minute, history, storeAction, cats } from './stores'\n    // Categoryとは、テキスト入力枠とボタンのセットである。\n    export let id;\n\n    let bg = palette(id)\n    // export let whatUdid;\n    let buttons\n    let sorted\n\n    cats.subscribe( value=> {\n        if ( Object.keys(value).length > 0 ){\n            buttons = value[id]\n            sorted = Object.keys(buttons).sort((a,b)=>buttons[b] - buttons[a])\n        }\n    })\n\n    let inputtext;\n\n    function update(action){\n        // 現在時刻\n        const date = new Date()\n        const now = date.getTime() / 1000 / 60 // in minute\n        const h = date.getHours()\n        const m = date.getMinutes()\n        // 開始時刻との差\n        const delta = (h-$hour+24)%24*60+(m-$minute)\n        // 1分以上なら\n        if ( delta > 0 ){\n            // 履歴に記録する\n            history.update(v => [[0,now,delta,id,action,h,m], ...v])\n            // historyを更新することで、自動的にボタンが更新される、はず。\n            storeAction(now, delta, id, action)\n\n        }\n        // 最新版では、サーバと矛盾がない限りreloadしないので、ボタンを強制的に追加する。\n        // ボタンを作成または更新\n        buttons[action] = now\n        // sort and pick 6 newest items\n        sorted = Object.keys(buttons).sort((a,b)=>buttons[b] - buttons[a]) //.slice(0,6)\n        // re-make buttons\n        let newbuttons = {}\n        sorted.forEach(element => {\n            newbuttons[element] = buttons[element]\n        });\n        buttons = newbuttons\n\n        // 最終操作時刻を更新\n        hour.set(h)\n        minute.set(m)\n    }\n\n\n    function onKeyDown (e) {\n        if (e.key == \"Enter\"){\n            update(inputtext)\n        }\n        // inputtext = \"\"\n    }\n    function onClick (e) {\n        update(e.target.innerText)\n    }\n\n\n    // ヒストリーを読みこんで、ボタンを再配置する機能が欲しい。\n</script>\n\n<p style:background-color={bg} >\n    <input bind:value={inputtext} placeholder=\"What did you do til now?\" on:keydown={onKeyDown} />\n    {#each sorted as name, i}\n    <button on:click={onClick} >{name}</button>\n    {/each}\n</p>\n\n<style>\n    p {\n        margin: 0;\n        padding: 2px;\n    }\n    button {\n        margin: 0;\n        background-color: #0000;\n        color: white;\n    }\n    input {\n        margin: 0;\n        background-color: #0000;\n        color: white;\n    }\n</style>","<script lang=\"ts\">\n    const items = [...Array(24).keys()];\n    import { hour } from './stores'\n\n    // let h\n    // hour.subscribe(value => {\n    //     h = value\n    // }\n\n</script>\n\n<select bind:value={$hour}>\n\t{#each items as value}<option {value}>{value}</option>{/each}\n</select>\n","<script lang=\"ts\">\n    const items = [...Array(60).keys()];\n    import { minute } from './stores'\n\n    // let selected = $minute\n    // $: {\n    //     selected = $minute\n    // }\n</script>\n\n<select bind:value={$minute}>\n\t{#each items as value}<option {value}>{value}</option>{/each}\n</select>\n","export function accum(tiles, index, category, minute) {\n    if (!(index in tiles)) {\n        tiles[index] = {};\n    }\n    if (!(category in tiles[index])) {\n        tiles[index][category] = 0;\n    }\n    tiles[index][category] += minute;\n}\n","import { accum } from './accum';\nexport function statistics(events, binw, oldest) {\n    let tiles = {};\n    const JSTFIX = 9 * 60;\n    const date = new Date();\n    const now = date.getTime() / 1000 / 60; // in minute\n    const origin = now + JSTFIX;\n    tiles = {};\n    // ひとつあとのイベントがはじまった時刻\n    let laststart = 0;\n    // 時間をさかのぼる順序で\n    for (let i = 0; i < events.length; i++) {\n        let event = events[i];\n        let endtime = event[1];\n        if (oldest > endtime) {\n            break;\n        }\n        if (laststart == 0) {\n            laststart = endtime;\n        }\n        let duration = event[2];\n        // 重なっている時は、新しい記録を信じ、古いほうを削る。\n        if (laststart < endtime) {\n            duration -= (endtime - laststart);\n            endtime = laststart;\n            if (duration < 0) {\n                continue;\n            }\n        }\n        laststart = endtime - duration;\n        const category = event[3];\n        const bin = Math.floor((endtime + JSTFIX) / binw);\n        let dbin = Math.floor(origin / binw) - bin;\n        let left = endtime + JSTFIX - bin * binw;\n        while (left < duration) {\n            accum(tiles, dbin, category, left);\n            duration -= left;\n            dbin++;\n            left = binw;\n        }\n        if (duration > 0) {\n            accum(tiles, dbin, category, duration);\n        }\n    }\n    for (let bin in tiles) {\n        let sum = 0;\n        for (let cat in tiles[bin]) {\n            sum += tiles[bin][cat];\n        }\n        const unaccounted = binw - sum;\n        if (unaccounted > 0) {\n            tiles[bin][-1] = unaccounted;\n        }\n    }\n    return tiles;\n}\n","<script lang=\"ts\">\n    import { history } from './stores';\n    import { palette } from './color';\n    import { statistics }   from './stat'\n\n    let tiles = {}\n    let hours = []\n\n\n    history.subscribe(events => {\n        const date = new Date()\n        const now = date.getTime() / 1000 / 60 // in minute\n        const h   = date.getHours()\n        tiles = statistics( events, 60, now - 60*24)\n\n        for (let i=0; i<24; i++){\n            hours = [...hours, (h-i+24)%24]\n        }\n    })\n\n</script>\n\n{#if Object.keys(tiles).length}\n{#each Array(24) as delta, i}\n<div class=\"ti\">\n    <div class=\"he\">{hours[i]}</div>\n    {#if tiles[i]}\n    {#each Object.keys(tiles[i]).sort() as cat}\n    <div class=\"ca\" style=\"width:{tiles[i][cat]}%;background-color:{palette(cat)};\">\n        {cat}\n    </div>\n    {/each}\n    {/if}\n</div>\n{/each}\n{/if}\n\n<style>\n    .ti {\n        display: flex;\n        text-align: center;\n        /* font-size:50%; */\n    }\n    .ca {\n        margin: 0px;\n        color: white;\n        text-align: center;\n    }\n    .he {\n        width:20%;\n        text-align: center;\n    }\n</style>\n","<script lang=\"ts\">\n    import { history } from './stores';\n    import { palette } from './color';\n    import { statistics } from './stat'\n\n    let tiles = {}\n    history.subscribe(events => {\n        const binw = 60*24\n        const date = new Date()\n        const now = date.getTime() / 1000 / 60 // in minute\n        const oldest = now - 24*60*7\n        tiles = statistics( events, binw, oldest )\n    })\n\n    const daynames = [\"Today\", \"Yesterday\", \"2 days ago\", \"3 days ago\", \"4 days ago\", \"5 days ago\", \"6 days ago\", \"A week ago\"]\n\n</script>\n\n<div class=\"container\">\n{#if Object.keys(tiles).length}\n{#each Object.keys(tiles).sort() as day, i}\n<div class=\"ti\">\n    <div class=\"he\">{daynames[day]}</div>\n    {#each Object.keys(tiles[day]).sort() as cat}\n    <div class=\"ca\" style=\"width:{tiles[day][cat]}px;background-color:{palette(cat)};\">\n        {cat}\n    </div>\n    {/each}\n</div>\n{/each}\n{/if}\n</div>\n\n<style>\n    .container {\n        display: flex;\n        flex-flow: column nowrap;\n        justify-content: flex-start;\n        align-items: flex-start;\n        /* overflow: auto; */\n    }\n    .ti {\n        display: flex;\n        text-align: center;\n        width: 100%;\n        /* font-size:50%; */\n    }\n    .ca {\n        margin: 0px;\n        color: white;\n        text-align: center;\n    }\n    .he {\n        width:200px;\n        text-align: center;\n    }\n</style>\n","<script lang=\"ts\">\n    import { history } from './stores';\n    import { palette } from './color';\n\n    // 日付けごとに別のカラムにする。\n    let days = []\n\n    history.subscribe(h => {\n        days = []\n\n        let events = []\n        let today = 0\n        for(let i=0; i<h.length; i++){\n            let event = h[i]\n            let daycode = Math.floor(event[1] / (24*60) )\n            if ( today == 0 ){\n                today = daycode\n            }\n            if ( daycode != today ){\n                today = daycode\n                days = [...days, events]\n                if ( days.length >= 7 ){\n                    return\n                }\n                events = []\n            }\n            events = [...events, event]\n        }\n    })\n\n</script>\n\n<div class=\"container\">\n    {#each days as events}\n    <div class=\"list\">\n        {#each events as event, i}\n        <!-- 0 user_id, 1 endtime, 2 duration, 3 category, 4 action, 5 hours, 6 minutes-->\n        <div class=\"ev\" style=\"background-color:{palette(event[3])};\" >\n            <!-- height:{event[2]}px; -->\n            {event[5]}:{event[6]} | {event[4]}\n        </div>\n        {/each}\n    </div>\n    {/each}\n</div>\n\n<style>\n    .container {\n        /* max-width: 800px; */\n        max-height: 500px;\n        display: flex;\n        flex-flow: row nowrap;\n        justify-content: flex-start;\n        align-items: flex-start;\n        overflow: auto;\n    }\n    .list {\n        display:  flex;\n        flex-flow: column nowrap;\n        overflow: auto;\n        width:    200px;\n    }\n    .ev {\n        border: white solid 0.2px;\n        color: white;\n    }\n</style>\n","<script>\n\t// import { store } from '../hooks/auth';\n    // const logout = () =>{$store=null}\n\n\timport { token, history, cats } from '../stores';\n    const logout = () => { \n        token.set(\"\")\n        history.set([])\n        cats.set({})\n    }\n</script>\n\n<button on:click={logout}>\n    Logout\n</button>\n\n\n<style>\n    button {\n        left:120px;\n        top: 10px;\n        text-align:center;\n        color: #000;\n    }\n</style>\n","<script>\n\timport { Tabs, TabList, TabPanel, Tab } from './Components/Tabs/tabs.js';\n\timport Category from \"./Category.svelte\"\n\timport Hour from \"./Hour.svelte\"\n\timport Minute from \"./Minute.svelte\"\n\timport HourStat from \"./HourStat.svelte\";\n\timport DayStat from \"./DayStat.svelte\";\n\timport EventList from \"./EventList.svelte\"\n\timport LogoutComponent from './Components/LogoutComponent.svelte';\n    import { cats, getHistory, status } from './stores.ts'\n\n\tgetHistory()\n\n\tsetInterval(() => {\n\t\tgetHistory()\n\t}, 60*1000)  // every one minute\n\n\tfunction addCategory() {\n\t\tlet c = 0\n\t\twhile ( c in $cats ){\n\t\t\tc ++\n\t\t}\n\t\t$cats[c] = {}\n\t}\n</script>\n\n<main>\n\t<LogoutComponent />\n\t<span>{$status}</span>\n\t<p>\n\t\t<Hour />時<Minute />分以降、何をしていましたか?\n\t</p>\n\t{#each Object.keys($cats) as id}\n\t<Category {id}/>\n\t{/each}\n\t<button name=\"name\" on:click={addCategory} >+ New Category</button>\n\t\n\t<Tabs>\n\t\t<TabList>\n\t\t\t<Tab>Events</Tab>\n\t\t\t<Tab>Hourly stat</Tab>\n\t\t\t<Tab>Daily stat</Tab>\n\t\t</TabList>\n\t\n\t\t<TabPanel>\n\t\t\t<EventList />\n\t\t</TabPanel>\n\t\n\t\t<TabPanel>\n\t\t\t<HourStat />\n\t\t</TabPanel>\n\t\n\t\t<TabPanel>\n\t\t\t<DayStat />\n\t\t</TabPanel>\n\t</Tabs>\n</main>\n\n<style>\n\tp {\n\t\tmargin: 0;\n\t}\n\tspan {\n\t\tcolor: #f00;\n\t}\n</style>","<script>\n\t// import { getUserDetails } from '../hooks/auth';\n\t// import { store } from '../hooks/auth';\n    import { token, getToken } from '../stores';\n    import { get } from \"svelte/store\";\n\n\tlet username = '';\n\tlet password = '';\n\tlet error = ''\n\n\tasync function login() {\n\t\t// const user = await getUserDetails( username, password )\n\t\tlet tok;\n        getToken( username, password ).then((tok)=>{\n\t\t\tif ( tok ) {\n\t\t\t\tif ( error ) error = ''\n\t\t\t}\n\t\t\telse {\n\t\t\t\terror = 'Incorrect username and password.'\n\t\t\t\tconsole.log(\"Incorrect username and password.\")\n\t\t\t}\n\t\t})\n\t}\n\n</script>\n\n<form on:submit|preventDefault={login} class=\"flex mx-auto col-6\">\n\n\t<div class=\"mb-3\">\n\t\t<label for=\"username\" class=\"form-label\">Username</label>\n\t\t<!-- <input type=\"email\" class=\"form-control\" id=\"username\" bind:value={username} /> -->\n\t\t<input type=\"text\" class=\"form-control\" id=\"username\" bind:value={username} autocomplete=\"username\"/>\n\t</div>\n\n\t<div class=\"mb-3\">\n\t\t<label for=\"password\" class=\"form-label\">Password</label>\n\t\t<input type=\"password\" class=\"form-control\" id=\"password\" bind:value={password} />\n\t</div>\n\n\t<button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n\t<div id=\"error_message\" class=\"text-danger\">\n\t\t<small>{error}</small>\n\t</div>\n\n</form>\n\n<style>\n    form {\n        max-width: 480px;\n        text-align: center;\n        padding: 1em;\n        margin: 0 auto;\n    }\n</style>","<script>\n\timport AfterLogin from './Components/AfterLogin.svelte';\n\t// import { store } from './hooks/auth';\n\timport { token } from './stores.ts';\n\timport LoginComponent from './Components/LoginComponent.svelte';\n\n</script>\n\n<svelte:head>\n\t<title>TimeAccount 2022</title>\n\t<meta name=\"robots\" content=\"noindex nofollow\" />\n\t<html lang=\"en\" />\n</svelte:head>\n\n\n{#if $token != \"\" }\n\t<AfterLogin />\n{:else }\n\t<LoginComponent />\n{/if}\n","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","subscribe","store","callbacks","unsub","unsubscribe","get_store_value","value","_","component_subscribe","component","callback","$$","on_destroy","push","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","select_option","select","option","__value","selected","selectedIndex","select_value","selected_option","querySelector","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","onDestroy","getContext","context","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","this","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","size","div","TABS","tabs","panels","selectedTab","selectedPanel","registerTab","tab","current","registerPanel","panel","selectTab","if_block","create_if_block","button","palette","n","hue","sqrt","h","s","min","f","color","round","toString","padStart","hslToHex","date","Date","hour","getHours","minute","getMinutes","history","cats","token","status","BASEURL","async","getHistory","body_","JSON","stringify","controller","AbortController","setTimeout","abort","res","fetch","method","headers","body","signal","catch","json","result","remote_history","parse","remotelast","floor","categories","row","minutes","hours","cat","endtime","action","t","t_value","buttons","sorted","inputtext","id","bg","now","getTime","delta","$hour","$minute","v","duration","category","storeAction","$$invalidate","sort","newbuttons","e","innerText","call","items","accum","tiles","statistics","events","binw","oldest","origin","laststart","bin","dbin","left","sum","unaccounted","each_value","each_value_1","t0","t0_value","create_if_block_1","div1","div0","show_if","t2_value","t4_value","t2","t4","days","today","daycode","main","span","each_blocks","setInterval","$cats","form","label0","input0","label1","input1","div2","small","preventDefault","username","password","error","un","pw","getToken","tok","console","log","head","meta","html"],"mappings":"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"}